//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "substance"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: String,
    pub name: String,
    pub common_names: String,
    pub brand_names: String,
    pub substitutive_name: Option<String>,
    pub systematic_name: String,
    pub pubchem_cid: i32,
    pub unii: Option<String>,
    pub cas_number: Option<String>,
    pub inchi_key: String,
    pub smiles: String,
    pub psychonautwiki_url: Option<String>,
    pub psychoactive_class: String,
    pub chemical_class: Option<String>,
    pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Name,
    CommonNames,
    BrandNames,
    SubstitutiveName,
    SystematicName,
    PubchemCid,
    Unii,
    CasNumber,
    InchiKey,
    Smiles,
    PsychonautwikiUrl,
    PsychoactiveClass,
    ChemicalClass,
    Description,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = String;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Ingestion,
    PsychoactiveClass,
    Stash,
    SubstanceInteractions,
    SubstanceRouteOfAdministration,
    SubstanceSynonym,
    SubstanceTolerance,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::String(None).def(),
            Self::Name => ColumnType::String(None).def(),
            Self::CommonNames => ColumnType::String(None).def(),
            Self::BrandNames => ColumnType::String(None).def(),
            Self::SubstitutiveName => ColumnType::String(None).def().null(),
            Self::SystematicName => ColumnType::String(None).def(),
            Self::PubchemCid => ColumnType::Integer.def(),
            Self::Unii => ColumnType::String(None).def().null(),
            Self::CasNumber => ColumnType::String(None).def().null(),
            Self::InchiKey => ColumnType::String(None).def(),
            Self::Smiles => ColumnType::String(None).def(),
            Self::PsychonautwikiUrl => ColumnType::String(None).def().null(),
            Self::PsychoactiveClass => ColumnType::String(None).def(),
            Self::ChemicalClass => ColumnType::String(None).def().null(),
            Self::Description => ColumnType::String(None).def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Ingestion => Entity::has_many(super::ingestion::Entity).into(),
            Self::PsychoactiveClass => Entity::has_many(super::psychoactive_class::Entity).into(),
            Self::Stash => Entity::has_many(super::stash::Entity).into(),
            Self::SubstanceInteractions => {
                Entity::has_many(super::substance_interactions::Entity).into()
            }
            Self::SubstanceRouteOfAdministration => {
                Entity::has_many(super::substance_route_of_administration::Entity).into()
            }
            Self::SubstanceSynonym => Entity::has_many(super::substance_synonym::Entity).into(),
            Self::SubstanceTolerance => Entity::has_many(super::substance_tolerance::Entity).into(),
        }
    }
}

impl Related<super::ingestion::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ingestion.def()
    }
}

impl Related<super::psychoactive_class::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PsychoactiveClass.def()
    }
}

impl Related<super::stash::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Stash.def()
    }
}

impl Related<super::substance_interactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SubstanceInteractions.def()
    }
}

impl Related<super::substance_route_of_administration::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SubstanceRouteOfAdministration.def()
    }
}

impl Related<super::substance_synonym::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SubstanceSynonym.def()
    }
}

impl Related<super::substance_tolerance::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SubstanceTolerance.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
