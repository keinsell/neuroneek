# AUTOGENERATED FROM:
#     'queries/create_substance.edgeql'
#     'queries/substance_by_name.edgeql'
# WITH:
#     $ edgedb-py --file --target blocking


from __future__ import annotations
import dataclasses
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateSubstanceResult(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class SubstanceByNameResult(NoPydanticValidation):
    id: uuid.UUID
    common_names: list[str] | None
    brand_names: list[str] | None
    substitutive_name: str | None
    unii: str | None
    systematic_name: str | None
    smiles: str | None
    psychoactive_class: list[str] | None
    name: str
    iupac: str | None
    inchi_key: str | None
    description: str | None
    chemical_class: str | None
    cas_number: str | None


def create_substance(
    executor: edgedb.Executor,
    *,
    common_names: list[str],
    brand_names: list[str],
    substitutive_name: str,
    cas_number: str,
    chemical_class: str,
    description: str,
    inchi_key: str,
    iupac: str,
    name: str,
    psychoactive_class: list[str],
    smiles: str,
    systematic_name: str,
    unii: str,
) -> CreateSubstanceResult:
    return executor.query_single(
        """\
        insert default::Substance {
          common_names := <array<std::str>>$common_names,
          brand_names := <array<std::str>>$brand_names,
          substitutive_name := <std::str>$substitutive_name,
          cas_number := <std::str>$cas_number,
          chemical_class := <std::str>$chemical_class,
          description := <std::str>$description,
          inchi_key := <std::str>$inchi_key,
          iupac := <std::str>$iupac,
          name := <std::str>$name,
          psychoactive_class := <array<std::str>>$psychoactive_class,
          smiles := <std::str>$smiles,
          systematic_name := <std::str>$systematic_name,
          unii := <std::str>$unii
        };\
        """,
        common_names=common_names,
        brand_names=brand_names,
        substitutive_name=substitutive_name,
        cas_number=cas_number,
        chemical_class=chemical_class,
        description=description,
        inchi_key=inchi_key,
        iupac=iupac,
        name=name,
        psychoactive_class=psychoactive_class,
        smiles=smiles,
        systematic_name=systematic_name,
        unii=unii,
    )


def substance_by_name(
    executor: edgedb.Executor,
    *,
    arg: str,
) -> SubstanceByNameResult | None:
    return executor.query_single(
        """\
        select default::Substance {
          id,
          common_names,
          brand_names,
          substitutive_name,
          unii,
          systematic_name,
          smiles,
          psychoactive_class,
          name,
          iupac,
          inchi_key,
          description,
          chemical_class,
          cas_number
        }
        filter .name = <str>$arg\
        """,
        arg=arg,
    )
