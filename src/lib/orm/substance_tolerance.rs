//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "substance_tolerance")]
pub struct Model
{
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    #[sea_orm(column_name = "substanceId", column_type = "Text", unique)]
    pub substance_id: String,
    #[sea_orm(column_type = "Text")]
    pub mechanism: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub mechanism_desciption: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub onset_mechanism: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub onset_description: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub decline_mechanism: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub decline_description: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub onset_duration: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub decline_to_baseline_duration: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub decline_to_half_duration: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation
{
    #[sea_orm(
        belongs_to = "super::substance::Entity",
        from = "Column::SubstanceId",
        to = "super::substance::Column::Id",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    Substance,
}

impl Related<super::substance::Entity> for Entity
{
    fn to() -> RelationDef { Relation::Substance.def() }
}

impl ActiveModelBehavior for ActiveModel {}
