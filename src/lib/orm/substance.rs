//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "substance")]
pub struct Model
{
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text", unique)]
    pub id: String,
    #[sea_orm(column_type = "Text", unique)]
    pub name: String,
    #[sea_orm(column_type = "Text")]
    pub common_names: String,
    #[sea_orm(column_type = "Text")]
    pub brand_names: String,
    #[sea_orm(column_type = "Text", nullable, unique)]
    pub substitutive_name: Option<String>,
    #[sea_orm(column_type = "Text", unique)]
    pub systematic_name: String,
    #[sea_orm(unique)]
    pub pubchem_cid: i32,
    #[sea_orm(column_type = "Text", nullable)]
    pub unii: Option<String>,
    #[sea_orm(column_type = "Text", nullable, unique)]
    pub cas_number: Option<String>,
    #[sea_orm(column_type = "Text", unique)]
    pub inchi_key: String,
    #[sea_orm(column_type = "Text", unique)]
    pub smiles: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub psychonautwiki_url: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub psychoactive_class: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub chemical_class: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation
{
    #[sea_orm(has_many = "super::psychoactive_class::Entity")]
    PsychoactiveClass,
    #[sea_orm(has_many = "super::substance_interactions::Entity")]
    SubstanceInteractions,
    #[sea_orm(has_many = "super::substance_route_of_administration::Entity")]
    SubstanceRouteOfAdministration,
    #[sea_orm(has_many = "super::substance_synonym::Entity")]
    SubstanceSynonym,
    #[sea_orm(has_one = "super::substance_tolerance::Entity")]
    SubstanceTolerance,
}

impl Related<super::psychoactive_class::Entity> for Entity
{
    fn to() -> RelationDef { Relation::PsychoactiveClass.def() }
}

impl Related<super::substance_interactions::Entity> for Entity
{
    fn to() -> RelationDef { Relation::SubstanceInteractions.def() }
}

impl Related<super::substance_route_of_administration::Entity> for Entity
{
    fn to() -> RelationDef { Relation::SubstanceRouteOfAdministration.def() }
}

impl Related<super::substance_synonym::Entity> for Entity
{
    fn to() -> RelationDef { Relation::SubstanceSynonym.def() }
}

impl Related<super::substance_tolerance::Entity> for Entity
{
    fn to() -> RelationDef { Relation::SubstanceTolerance.def() }
}

impl ActiveModelBehavior for ActiveModel {}
