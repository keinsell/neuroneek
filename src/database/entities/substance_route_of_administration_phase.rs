//! `SeaORM` Entity, @generated by sea-entities-codegen 1.1.3

use sea_orm::entity::prelude::*;
use serde::Deserialize;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "substance_route_of_administration_phase")]
pub struct Model
{
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    #[sea_orm(column_type = "Text")]
    pub classification: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub lower_duration: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub upper_duration: Option<String>,
    #[sea_orm(
        column_name = "routeOfAdministrationId",
        column_type = "Text",
        nullable
    )]
    pub route_of_administration_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation
{
    #[sea_orm(
        belongs_to = "super::substance_route_of_administration::Entity",
        from = "Column::RouteOfAdministrationId",
        to = "super::substance_route_of_administration::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    SubstanceRouteOfAdministration,
}

impl Related<super::substance_route_of_administration::Entity> for Entity
{
    fn to() -> RelationDef { Relation::SubstanceRouteOfAdministration.def() }
}

impl ActiveModelBehavior for ActiveModel {}
