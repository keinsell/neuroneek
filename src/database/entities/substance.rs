//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::Deserialize;
use serde::Serialize;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity
{
    fn table_name(&self) -> &str { "substance" }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model
{
    pub id: String,
    pub name: String,
    pub common_names: String,
    pub pubchem_cid: i32,
    pub psychonautwiki_url: Option<String>,
    pub psychoactive_class: String,
    pub chemical_class: Option<String>,
    pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column
{
    Id,
    Name,
    CommonNames,
    PubchemCid,
    PsychonautwikiUrl,
    PsychoactiveClass,
    ChemicalClass,
    Description,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey
{
    Id,
}

impl PrimaryKeyTrait for PrimaryKey
{
    type ValueType = String;
    fn auto_increment() -> bool { false }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation
{
    SubstanceRouteOfAdministration,
}

impl ColumnTrait for Column
{
    type EntityName = Entity;
    fn def(&self) -> ColumnDef
    {
        match self
        {
            | Self::Id => ColumnType::Text.def().unique(),
            | Self::Name => ColumnType::Text.def().unique(),
            | Self::CommonNames => ColumnType::Text.def(),
            | Self::PubchemCid => ColumnType::Integer.def().unique(),
            | Self::PsychonautwikiUrl => ColumnType::Text.def().null(),
            | Self::PsychoactiveClass => ColumnType::Text.def(),
            | Self::ChemicalClass => ColumnType::Text.def().null(),
            | Self::Description => ColumnType::Text.def().null(),
        }
    }
}

impl RelationTrait for Relation
{
    fn def(&self) -> RelationDef
    {
        match self
        {
            | Self::SubstanceRouteOfAdministration =>
            {
                Entity::has_many(super::substance_route_of_administration::Entity).into()
            }
        }
    }
}

impl Related<super::substance_route_of_administration::Entity> for Entity
{
    fn to() -> RelationDef { Relation::SubstanceRouteOfAdministration.def() }
}

impl ActiveModelBehavior for ActiveModel {}
