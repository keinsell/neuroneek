//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "subject")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    #[sea_orm(column_name = "firstName")]
    pub first_name: Option<String>,
    #[sea_orm(column_name = "lastName")]
    pub last_name: Option<String>,
    #[sea_orm(column_name = "dateOfBirth")]
    pub date_of_birth: Option<DateTime>,
    pub weight: Option<i32>,
    pub height: Option<i32>,
    pub account_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::account::Entity",
        from = "Column::AccountId",
        to = "super::account::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    Account,
    #[sea_orm(has_many = "super::ingestion::Entity")]
    Ingestion,
    #[sea_orm(has_many = "super::stash::Entity")]
    Stash,
}

impl Related<super::account::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Account.def()
    }
}

impl Related<super::ingestion::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ingestion.def()
    }
}

impl Related<super::stash::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Stash.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
