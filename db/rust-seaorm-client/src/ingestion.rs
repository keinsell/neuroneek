//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "ingestion")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub substance_name: Option<String>,
    pub administration_route: Option<String>,
    pub dosage_unit: Option<String>,
    pub dosage_amount: Option<i32>,
    pub ingestion_date: Option<DateTime>,
    pub subject_id: Option<String>,
    pub stash_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::stash::Entity",
        from = "Column::StashId",
        to = "super::stash::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    Stash,
    #[sea_orm(
        belongs_to = "super::subject::Entity",
        from = "Column::SubjectId",
        to = "super::subject::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    Subject,
    #[sea_orm(
        belongs_to = "super::substance::Entity",
        from = "Column::SubstanceName",
        to = "super::substance::Column::Name",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    Substance,
}

impl Related<super::stash::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Stash.def()
    }
}

impl Related<super::subject::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Subject.def()
    }
}

impl Related<super::substance::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Substance.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
