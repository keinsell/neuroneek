//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "substance_tolerance"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: String,
    pub substance_id: String,
    pub mechanism: String,
    pub mechanism_desciption: Option<String>,
    pub onset_mechanism: String,
    pub onset_description: Option<String>,
    pub decline_mechanism: String,
    pub decline_description: Option<String>,
    pub onset_duration: Option<String>,
    pub decline_to_baseline_duration: Option<String>,
    pub decline_to_half_duration: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    #[sea_orm(column_name = "substanceId")]
    SubstanceId,
    Mechanism,
    MechanismDesciption,
    OnsetMechanism,
    OnsetDescription,
    DeclineMechanism,
    DeclineDescription,
    OnsetDuration,
    DeclineToBaselineDuration,
    DeclineToHalfDuration,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = String;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Substance,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::String(None).def(),
            Self::SubstanceId => ColumnType::String(None).def(),
            Self::Mechanism => ColumnType::String(None).def(),
            Self::MechanismDesciption => ColumnType::String(None).def().null(),
            Self::OnsetMechanism => ColumnType::String(None).def(),
            Self::OnsetDescription => ColumnType::String(None).def().null(),
            Self::DeclineMechanism => ColumnType::String(None).def(),
            Self::DeclineDescription => ColumnType::String(None).def().null(),
            Self::OnsetDuration => ColumnType::String(None).def().null(),
            Self::DeclineToBaselineDuration => ColumnType::String(None).def().null(),
            Self::DeclineToHalfDuration => ColumnType::String(None).def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Substance => Entity::belongs_to(super::substance::Entity)
                .from(Column::SubstanceId)
                .to(super::substance::Column::Id)
                .into(),
        }
    }
}

impl Related<super::substance::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Substance.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
