//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "stash")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub owner_id: String,
    pub substance_id: String,
    #[sea_orm(column_name = "addedDate")]
    pub added_date: Option<DateTime>,
    pub expiration: Option<DateTime>,
    pub amount: Option<i32>,
    pub price: Option<String>,
    pub vendor: Option<String>,
    pub description: Option<String>,
    pub purity: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::ingestion::Entity")]
    Ingestion,
    #[sea_orm(
        belongs_to = "super::subject::Entity",
        from = "Column::OwnerId",
        to = "super::subject::Column::Id",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    Subject,
    #[sea_orm(
        belongs_to = "super::substance::Entity",
        from = "Column::SubstanceId",
        to = "super::substance::Column::Name",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    Substance,
}

impl Related<super::ingestion::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ingestion.def()
    }
}

impl Related<super::subject::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Subject.def()
    }
}

impl Related<super::substance::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Substance.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
