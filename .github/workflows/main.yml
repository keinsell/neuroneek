name: CI

on:
  push:
    branches: [trunk]
  pull_request:
    branches: [trunk]

env:
  GIT_LFS_CACHE_DIR: '${{github.workspace}}/git-lfs-cache'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      TURBO_REMOTE_ONLY: true
    steps:
      - uses: actions/checkout@v3

      - name: Restore Git LFS cache
        uses: actions/cache@v2
        id: git-lfs-cache
        with:
          path: '${{env.GIT_LFS_CACHE_DIR}}'
          key: "${{runner.os}}-git-lfs-${{hashFiles('**/lfs/*')}}"
          restore-keys: |
            ${{runner.os}}-git-lfs-

      - name: Skip Git LFS checkout for cached files
        if: steps.git-lfs-cache.outputs.cache-hit == 'true'
        run: |
          git lfs checkout
          echo "Skipping Git LFS checkout for cached files"

      - name: Download Git LFS files
        if: steps.git-lfs-cache.outputs.cache-hit != 'true'
        run: git lfs checkout

      - name: Save Git LFS cache
        uses: actions/cache@v2
        id: save-git-lfs-cache
        with:
          path: '${{env.GIT_LFS_CACHE_DIR}}'
          key: "${{runner.os}}-git-lfs-${{hashFiles('**/lfs/*')}}"

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: yarn

      - uses: volta-cli/action@v3

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - name: Cache yarn cache
        uses: actions/cache@v3
        id: cache-yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Setup prisma
        run: yarn run turbo db:generate

      - name: Build
        run: yarn build

  test:
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      TURBO_REMOTE_ONLY: true
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Restore Git LFS cache
        uses: actions/cache@v2
        id: git-lfs-cache
        with:
          path: '${{env.GIT_LFS_CACHE_DIR}}'
          key: "${{runner.os}}-git-lfs-${{hashFiles('**/lfs/*')}}"
          restore-keys: |
            ${{runner.os}}-git-lfs-

      - name: Skip Git LFS checkout for cached files
        if: steps.git-lfs-cache.outputs.cache-hit == 'true'
        run: |
          git lfs checkout
          echo "Skipping Git LFS checkout for cached files"

      - name: Download Git LFS files
        if: steps.git-lfs-cache.outputs.cache-hit != 'true'
        run: git lfs checkout

      - name: Save Git LFS cache
        uses: actions/cache@v2
        id: save-git-lfs-cache
        with:
          path: '${{env.GIT_LFS_CACHE_DIR}}'
          key: "${{runner.os}}-git-lfs-${{hashFiles('**/lfs/*')}}"

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: yarn

      - uses: volta-cli/action@v3

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - name: Cache yarn cache
        uses: actions/cache@v3
        id: cache-yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Setup prisma
        run: yarn run turbo db:generate

      - name: Test
        run: yarn test

      - uses: codecov/codecov-action@v3
        with:
          files: ./packages/osiris/coverage/lcov.info #, ...

  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Restore Git LFS cache
        uses: actions/cache@v2
        id: git-lfs-cache
        with:
          path: '${{env.GIT_LFS_CACHE_DIR}}'
          key: "${{runner.os}}-git-lfs-${{hashFiles('**/lfs/*')}}"
          restore-keys: |
            ${{runner.os}}-git-lfs-

      - name: Skip Git LFS checkout for cached files
        if: steps.git-lfs-cache.outputs.cache-hit == 'true'
        run: |
          git lfs checkout
          echo "Skipping Git LFS checkout for cached files"

      - name: Download Git LFS files
        if: steps.git-lfs-cache.outputs.cache-hit != 'true'
        run: git lfs checkout

      - name: Save Git LFS cache
        uses: actions/cache@v2
        id: save-git-lfs-cache
        with:
          path: '${{env.GIT_LFS_CACHE_DIR}}'
          key: "${{runner.os}}-git-lfs-${{hashFiles('**/lfs/*')}}"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./apps/server/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
