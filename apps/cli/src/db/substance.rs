//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "substance")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: String,
    pub common_names: String,
    pub brand_names: String,
    pub substitutive_name: Option<String>,
    pub systematic_name: String,
    pub pubchem_cid: i32,
    pub unii: Option<String>,
    pub cas_number: Option<String>,
    pub inchi_key: String,
    pub smiles: String,
    pub psychonautwiki_url: Option<String>,
    pub psychoactive_class: String,
    pub chemical_class: Option<String>,
    pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::ingestion::Entity")]
    Ingestion,
    #[sea_orm(has_many = "super::stash::Entity")]
    Stash,
    #[sea_orm(has_many = "super::substance_interaction::Entity")]
    SubstanceInteraction,
    #[sea_orm(has_many = "super::psychoactive_class::Entity")]
    PsychoactiveClass,
    #[sea_orm(has_many = "super::substance_route_of_administration::Entity")]
    SubstanceRouteOfAdministration,
    #[sea_orm(has_many = "super::substance_synonym::Entity")]
    SubstanceSynonym,
    #[sea_orm(has_many = "super::substance_tolerance::Entity")]
    SubstanceTolerance,
}

impl Related<super::ingestion::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ingestion.def()
    }
}

impl Related<super::stash::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Stash.def()
    }
}

impl Related<super::substance_interaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SubstanceInteraction.def()
    }
}

impl Related<super::psychoactive_class::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PsychoactiveClass.def()
    }
}

impl Related<super::substance_route_of_administration::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SubstanceRouteOfAdministration.def()
    }
}

impl Related<super::substance_synonym::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SubstanceSynonym.def()
    }
}

impl Related<super::substance_tolerance::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SubstanceTolerance.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
