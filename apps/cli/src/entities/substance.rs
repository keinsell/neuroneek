//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use tabled::Tabled;

#[derive(Copy, Clone, Default, Debug, DeriveEntity, Tabled)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "substance"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize, Tabled)]
pub struct Model {
    pub id: i32,
    pub name: String,
    pub common_names: String,
    pub brand_names: String,
    pub substitute_name: String,
    pub chemical_classes: String,
    pub description: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Name,
    CommonNames,
    BrandNames,
    SubstituteName,
    ChemicalClasses,
    Description,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::Name => ColumnType::String(None).def(),
            Self::CommonNames => ColumnType::String(None).def(),
            Self::BrandNames => ColumnType::String(None).def(),
            Self::SubstituteName => ColumnType::String(None).def(),
            Self::ChemicalClasses => ColumnType::String(None).def(),
            Self::Description => ColumnType::String(None).def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {}
