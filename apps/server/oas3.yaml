components:
    examples: {}
    headers: {}
    parameters: {}
    requestBodies: {}
    responses: {}
    schemas:
        RouteOfAdministrationClassification:
            enum:
                - oral
                - sublingual
                - buccal
                - insufflated
                - rectal
                - transdermal
                - subcutaneous
                - intramuscular
                - interavenous
                - smoked
            type: string
        DosageClassification:
            description: "The range and intensity of the effects of a substance depends on upon a number of factors. These include route of administration, dosage, set and setting, and personal and environmental factors.\n\nEffective doses can be divided into five categories: `threshold`, `light`, `moderate`, `strong`, and `heavy`."
            enum:
                - thereshold
                - light
                - moderate
                - strong
                - heavy
                - overdose
            type: string
        IngestedSubstanceResponseDTO:
            properties:
                substance:
                    type: string
                routeOfAdministration:
                    $ref: '#/components/schemas/RouteOfAdministrationClassification'
                dosageClassification:
                    $ref: '#/components/schemas/DosageClassification'
                dosage:
                    type: string
                dateOfIngestion:
                    type: string
                    format: date-time
            required:
                - substance
                - routeOfAdministration
                - dosageClassification
                - dosage
                - dateOfIngestion
            type: object
            additionalProperties: false
        IngestSubstanceRequestDTO:
            properties:
                substance:
                    type: string
                    description: "Ingested substance name, this is not id of substance, but name of substance, as user may ingest substance which is not yet in database and we wish to collect information about them or link these request to existing substances to provide better information for users.\n\nEDIT: As actual state of application, server will reject requests with not existing substances, so this is not actual anymore."
                    example: Amphetamine
                amount:
                    type: string
                    description: "\nDosage of ingested substance, expressed in string which allows to calculate amount of substance ingested, for example \"5mg\" or \"1g\"."
                    example: 5mg
                purity:
                    type: number
                    format: double
                    example: 0.9
                route:
                    $ref: '#/components/schemas/RouteOfAdministrationClassification'
                    example: oral
                ingestedAt:
                    type: string
                    format: date-time
                    example: ""
                isConsumed:
                    type: boolean
                    description: 'Information about state of ingestion, as some ingestions may be planned but not actually consumed - once consumed, ingestion will update ingestion date, if such value will be not provided ingestion will start as it''s created.'
                    example: true
            required:
                - substance
                - amount
                - route
                - ingestedAt
            type: object
            additionalProperties: false
        UserProfileResponseDTO:
            properties:
                id:
                    type: string
                username:
                    type: string
                    description: 'Automatically generated username to identify user.'
                weight:
                    type: number
                    format: double
                height:
                    type: number
                    format: double
                dateOfBirth:
                    type: string
                    format: date-time
                ingestionCount:
                    type: number
                    format: double
                token:
                    type: string
            required:
                - id
                - username
                - ingestionCount
                - token
            type: object
            additionalProperties: false
        LoginUserResponseDTO:
            properties:
                id:
                    type: string
                username:
                    type: string
                    description: 'Automatically generated username to identify user.'
                weight:
                    type: number
                    format: double
                height:
                    type: number
                    format: double
                dateOfBirth:
                    type: string
                    format: date-time
                token:
                    type: string
            required:
                - id
                - username
                - token
            type: object
            additionalProperties: false
        ApplicationErrorDTO:
            properties:
                name:
                    type: string
                message:
                    type: string
                code:
                    type: number
                    format: double
            required:
                - name
                - message
                - code
            type: object
            additionalProperties: false
        LoginUserRequestDTO:
            properties:
                username:
                    type: string
                    example: k3kSy2kHww18_lqi
                recoveryKey:
                    type: string
                    example: IxvepKokzvEIaXdpkwxRA7WqnMCrSxWD
            required:
                - username
                - recoveryKey
            type: object
            additionalProperties: false
        RegisterUserReponseDTO:
            properties:
                id:
                    type: string
                username:
                    type: string
                    description: 'Automatically generated username to identify user.'
                weight:
                    type: number
                    format: double
                height:
                    type: number
                    format: double
                dateOfBirth:
                    type: string
                    format: date-time
                recoveryKey:
                    type: string
                    description: 'RecoveryKey is necessary key to interact with user account.'
                token:
                    type: string
                    description: JsonWebToken
            required:
                - id
                - username
                - recoveryKey
                - token
            type: object
            additionalProperties: false
    securitySchemes: {}
info:
    title: neuronek
    version: 1.0.0
    description: 'Documentation of ongoing API of application.'
    contact:
        name: 'Jakub Olan'
        email: keinsell@protonmail.com
openapi: 3.0.0
paths:
    /ingestion:
        post:
            operationId: ingest-substance
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IngestedSubstanceResponseDTO'
            tags:
                - Ingestion
            security:
                -
                    jwt:
                        - user
            parameters: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/IngestSubstanceRequestDTO'
    /user:
        get:
            operationId: get-user
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserProfileResponseDTO'
            tags:
                - User
            security:
                -
                    jwt:
                        - user
            parameters: []
    /user/login:
        post:
            operationId: login-user
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LoginUserResponseDTO'
                            examples:
                                'Example 1':
                                    value: {id: clbxb2x0s0002pod51nbk1uob, username: T51GPDba7qwEnu73, token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNsYnhhejRuMDAxMDY3Z2Q1ejVjcXhuNjMiLCJ1c2VybmFtZSI6IlQ1MUdQRGJhN3F3RW51NzMiLCJpYXQiOjE2NzE2MDU4NzB9.9MblyhSFdtIlsGvz21OqEQGjx9fA7FC1dwsQL73rGZM}
                '400':
                    description: 'Bad Request'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ApplicationErrorDTO'
                            examples:
                                'Example 1':
                                    value: {code: 400, message: 'Bad Request', name: BadRequestError}
            tags:
                - User
            security: []
            parameters: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LoginUserRequestDTO'
    /user/register:
        post:
            operationId: register-user
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RegisterUserReponseDTO'
                            examples:
                                'Example 1':
                                    value: {username: T51GPDba7qwEnu73, recoveryKey: wESm3711FEGAlba74rGOAYzXtCdzSjdx, token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNsYnhhejRuMDAxMDY3Z2Q1ejVjcXhuNjMiLCJ1c2VybmFtZSI6IlQ1MUdQRGJhN3F3RW51NzMiLCJpYXQiOjE2NzE2MDU4NzB9.9MblyhSFdtIlsGvz21OqEQGjx9fA7FC1dwsQL73rGZM}
            tags:
                - User
            security: []
            parameters: []
servers:
    -
        url: /
tags:
    -
        name: User
        description: 'Operations about users'
        externalDocs:
            description: 'Find out more about users'
            url: 'http://swagger.io'
